# -*- python -*-
# ex: set syntax=python:

# Extend paths to allow loading zorg and config modules.
import os, sys
path = '/data/buildbot/master'
if path not in sys.path:
  sys.path.append(path)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import config

# Reload stuff automatically.
#
# FIXME: Find better way.
reload(config.builders)
reload(config)

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local-slave", "pass")]
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
from zorg.buildbot.changes.llvmpoller import LLVMPoller

c['change_source'] = [PBChangeSource()]

c['change_source'].append(LLVMPoller(projects=[
    "llvm",
    "cfe",
    "clang-tools-extra",
    "llgo"]))

####### RESOURCE USAGE

# Number of build records to maintain per builder.
c['buildHorizon'] = 200

# Number of logs to maintain per builder.
c['logHorizon'] = 50

# Number of events (connect, disconnect, etc.) to maintain.
c['eventHorizon'] = 100

# Number of builds to cache in memory.
c['buildCacheSize'] = 200

# Do not compress logs to reduce server load.
# We have a designated build master with large enough HDD.
c['logCompressionLimit'] = False

####### BUILDERS

c['builders'] = builders = list(config.builders.get_builders())

####### STATUS TARGETS

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'] = [ html.WebStatus(http_port=8010, authz=authz_cfg) ]

####### SCHEDULERS

from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.basic import SingleBranchScheduler

def depends_on(projects):
    """
    Returns a ChangeFilter for the given projects.
    """
    return ChangeFilter(project=projects)

def get_all_for(category):
    """
    Returns a list of builder names for the given category.
    """
    return [
        b['name'] for b in builders
                  if b['category'] == category]


c['schedulers'] = [
    SingleBranchScheduler(name="llgo_scheduler",
                          treeStableTimer=2*60,
                          builderNames=get_all_for("llgo"),
                          change_filter=depends_on(["cfe", "llvm", "llgo"])),
]


####### PROJECT IDENTITY

c['title'] = "LLVM"
c['titleURL'] = "http://llvm.org/"
c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"
